package com.example.imagesendtest;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HTTP;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

public class MainActivity extends Activity implements OnClickListener {

	private static final int RESULT_LOAD_IMAGE = 1;
	private static final String SERVER_ADDRESS = "http://223.194.141.168/MOD_WAS/";

	ImageView imageToUpload, downloadedImage;
	Button bUploadImage, bDownloadImage, sendBtn;
	EditText uploadImageName, downloadImageName;

	EditText userid, contents, city, district, major, sub, selectionWay;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		imageToUpload = (ImageView) findViewById(R.id.imageToUpload);
		downloadedImage = (ImageView) findViewById(R.id.downloadedImage);

		bUploadImage = (Button) findViewById(R.id.bUploadImage);
		bDownloadImage = (Button) findViewById(R.id.bDownloadImage);

		uploadImageName = (EditText) findViewById(R.id.uploadImageName);
		downloadImageName = (EditText) findViewById(R.id.downloadImageName);
		sendBtn = (Button) findViewById(R.id.sendBtn);

		////////////////////////////////////////////
		userid = (EditText) findViewById(R.id.userid);
		contents = (EditText) findViewById(R.id.contents);
		city = (EditText) findViewById(R.id.city);
		district = (EditText) findViewById(R.id.district);
		major = (EditText) findViewById(R.id.major);
		sub = (EditText) findViewById(R.id.sub);
		selectionWay = (EditText) findViewById(R.id.selectionWay);

		imageToUpload.setOnClickListener(this);
		bUploadImage.setOnClickListener(this);
		bDownloadImage.setOnClickListener(this);

		sendBtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				// UploadImage send = new UploadImage();

				Bitmap image = ((BitmapDrawable) imageToUpload.getDrawable()).getBitmap();
				new UploadImage(image, uploadImageName.getText().toString()).execute(userid.getText().toString(),
						contents.getText().toString(), city.getText().toString(), district.getText().toString(),
						major.getText().toString(), sub.getText().toString(), selectionWay.getText().toString());
			}
		});
	}

	private class UploadImage extends AsyncTask<String, Void, Void> {
		Bitmap image;
	//	String name;

		public UploadImage() {
			super();
		}

		public UploadImage(Bitmap image, String name) {
			super();
			this.image = image;
		//	this.name = name;
		}

		@Override
		protected Void doInBackground(String... params) {
			ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
			image.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream);
			String endcodedImage = Base64.encodeToString(byteArrayOutputStream.toByteArray(), Base64.DEFAULT);

			ArrayList<NameValuePair> dataToSend = new ArrayList<NameValuePair>();
			dataToSend.add(new BasicNameValuePair("image", endcodedImage));
			//dataToSend.add(new BasicNameValuePair("name", name));

			HttpParams httpRequestParams = getHttpRequestParams();
			HttpClient client = new DefaultHttpClient(httpRequestParams);

			HttpPost post = new HttpPost(SERVER_ADDRESS + "WritingGoods.do");

			
			dataToSend.add(new BasicNameValuePair("userid", params[0]));
			dataToSend.add(new BasicNameValuePair("contents", params[1]));
			dataToSend.add(new BasicNameValuePair("city", params[2]));
			dataToSend.add(new BasicNameValuePair("district", params[3]));
			dataToSend.add(new BasicNameValuePair("major", params[4]));
			dataToSend.add(new BasicNameValuePair("sub", params[5]));
			dataToSend.add(new BasicNameValuePair("selectionWay", params[6]));

			Log.d("image", endcodedImage);
			
			try {
				post.setEntity(new UrlEncodedFormEntity(dataToSend));
				client.execute(post);

			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			Toast.makeText(getApplicationContext(), "image uploaded", Toast.LENGTH_SHORT).show();
		}

	}

	private HttpParams getHttpRequestParams() {
		HttpParams httpRequestParams = new BasicHttpParams();
		HttpConnectionParams.setConnectionTimeout(httpRequestParams, 1000 * 30);
		HttpConnectionParams.setSoTimeout(httpRequestParams, 1000 * 30);
		return httpRequestParams;

	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub

		switch (v.getId()) {
		case R.id.imageToUpload:
			Intent galleryIntent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
			startActivityForResult(galleryIntent, RESULT_LOAD_IMAGE);
			Log.d("MAin", "¾÷·ÎµåµÊ");
		case R.id.bUploadImage:
			break;
		case R.id.bDownloadImage:
/*			Bitmap image = ((BitmapDrawable) imageToUpload.getDrawable()).getBitmap();
			new UploadImage(image, uploadImageName.getText().toString()).execute(userid.getText().toString(),
					contents.getText().toString(), city.getText().toString(), district.getText().toString(),
					major.getText().toString(), sub.getText().toString(), selectionWay.getText().toString());
*/			break;
		default:
			break;
		}

	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);

		if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK && data != null) {
			Uri selectedImage = data.getData();
			imageToUpload.setImageURI(selectedImage);

		}
	}

}
