package com.example.mainview;

import java.io.IOException;
import java.util.ArrayList;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ListView;

public class MainActivity extends Activity {
	ListView listView;
	MainViewAdapter mainAdapter;
	ArrayList<GoodsDTO> goodsList = new ArrayList<GoodsDTO>();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		listView = (ListView) findViewById(R.id.listview);
		mainAdapter = new MainViewAdapter();

		System.out.println("아이썅1");
		// 데이터 추가

		ReceiveGoods goods = new ReceiveGoods();

		System.out.println("아이썅2");
		goods.execute();

		System.out.println("아이썅3");

		mainAdapter.addItems(goodsList);

		System.out.println("아이썅4");
		listView.setAdapter(mainAdapter);

	}

	class ReceiveGoods extends AsyncTask<Void, Void, String> {

		private void resultParse(String result) throws JSONException {
			JSONArray jsonArr = new JSONArray(result);

			for (int i = 0; i < jsonArr.length(); i++) {
				JSONObject jsonObj = jsonArr.getJSONObject(i);

				String articleNum = jsonObj.getString("articleNum");
				String userid = jsonObj.getString("userid");
				String city = jsonObj.getString("city");
				String district = jsonObj.getString("district");
				String major = jsonObj.getString("major");
				String sub = jsonObj.getString("sub");

				String contents = jsonObj.getString("contents");
				String hashtag = jsonObj.getString("hashtag");

				String selectionWay = jsonObj.getString("selectionWay");
				String postingTime = jsonObj.getString("postingTime");
				String imgBuf = jsonObj.getString("image");
				byte[] imgByte = imgBuf.getBytes();
				Bitmap imgBitmap = BitmapFactory.decodeByteArray(imgByte, 0, imgByte.length);
				GoodsDTO item = new GoodsDTO(articleNum, userid, city, district, major, sub, contents, hashtag,
						selectionWay, postingTime, imgBitmap);
				GoodsDTO items = new GoodsDTO(contents, hashtag);

				System.out.println("들어간거지?");
				goodsList.add(items);
			}
		}

		@Override
		protected String doInBackground(Void... param) {

			// TODO Auto-generated method stub
			JSONObject json = null;
			String result = null;
			try {
				System.out.println("0");
				HttpClient client = new DefaultHttpClient();
				String postURL = "http://223.194.141.168/MOD_WAS/ReadGoods.do";
				HttpPost post = new HttpPost(postURL);
				HttpResponse responsePOST = client.execute(post);
				System.out.println("1");

				HttpEntity httpEntity = responsePOST.getEntity();
//
		
				
				try {
					json = new JSONObject(EntityUtils.toString(httpEntity));
				} catch (ParseException e) {
					e.printStackTrace();
				} catch (JSONException e) {
					e.printStackTrace();
				}

				try {
					if (json.getString("result").equals("READ_COMPLETE")) {
						result = json.getString("goods");
					} else {
						result = "fail";
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
				
				
	//			
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				try {

					resultParse(EntityUtils.toString(httpEntity));
					System.out.println("3");
				} catch (ParseException e) {
					e.printStackTrace();
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;

		}
	}

	class MainViewAdapter extends BaseAdapter {

		ArrayList<GoodsDTO> items = new ArrayList<GoodsDTO>();

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return items.size();
		}

		public void addItems(ArrayList<GoodsDTO> item) {
			items = item;
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return items.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub

			System.out.println("4");
			MainItemView view = null;

			if (convertView == null) {
				view = new MainItemView(getApplicationContext());
			} else {
				view = (MainItemView) convertView;
			}

			GoodsDTO curItem = items.get(position);

			view.setContentsText(curItem.getContents());
			view.setHashText(curItem.getHashtag());
			return view;
		}

	}
}
